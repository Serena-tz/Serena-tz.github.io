{
    "version": "https://jsonfeed.org/version/1",
    "title": "阳光果苏 • All posts by \"es6\" tag",
    "description": "心情笔记 & 编程日记",
    "home_page_url": "https://Serena-tz.github.io",
    "items": [
        {
            "id": "https://serena-tz.github.io/2020/10/19/%E5%88%9D%E5%A7%8BES6%E6%96%B0%E7%89%B9%E6%80%A7/",
            "url": "https://serena-tz.github.io/2020/10/19/%E5%88%9D%E5%A7%8BES6%E6%96%B0%E7%89%B9%E6%80%A7/",
            "title": "初始ES6新特性",
            "date_published": "2020-10-19T08:04:53.000Z",
            "content_html": "<h2 id=\"新的声明变量的方式\"><a class=\"markdownIt-Anchor\" href=\"#新的声明变量的方式\">#</a> 新的声明变量的方式</h2>\n<p>之前用的都是 var 来声明变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);<span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">---------</span><br><span class=\"line\">alert(a);<span class=\"comment\">// undefined,var fun</span></span><br><span class=\"line\">fun();<span class=\"comment\">//undefined(); not defined,not a function,IE8及以下会执行函数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">var</span> fun=<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>let 关键字<br>\n声明变量的另一种方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>的特点： (面试)</span><br><span class=\"line\"><span class=\"number\">1</span>、是块级作用域，无论在哪里声明，都只能在所包含的作用域内访问，比如函数和代码块（&#123;&#125;这种形式）都可以形成块级作用域</span><br><span class=\"line\"><span class=\"number\">2</span>、在同级作用域内，不能重复声明,包括混用<span class=\"keyword\">var</span> 和<span class=\"keyword\">let</span></span><br><span class=\"line\"><span class=\"number\">3</span>、没有变量提升，也就是没有预解析，必须要先声明再使用（即所谓的暂死区，变量没执行时是不会被扫描到的，必须执行到才会将变量释放并可用）</span><br><span class=\"line\"></span><br><span class=\"line\">作用：</span><br><span class=\"line\"><span class=\"number\">1.</span> 让我们的代码写得更规范严谨</span><br><span class=\"line\"><span class=\"number\">2.</span> 解决了之前使用闭包才能解决的问题</span><br><span class=\"line\"><span class=\"number\">3.</span> 建议在移动端开发中使用<span class=\"keyword\">let</span>来代替<span class=\"keyword\">var</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>const<br>\n 声明常量的一种方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">特点：</span><br><span class=\"line\">    <span class=\"number\">1</span>、声明时必须要赋值，且该值不可改变</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> a;不行的</span><br><span class=\"line\">    <span class=\"number\">2</span>、是块级作用域。同<span class=\"keyword\">let</span></span><br><span class=\"line\">    <span class=\"number\">3</span>、对于对象，不能改对象本身，但可以改里面的属性值，也就是只能通过访问的方式改属性值。类似于指针，不能改变地址，但能改变里面的值</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> obj=&#123;&#125;</span><br><span class=\"line\">    obj=<span class=\"number\">123</span>;<span class=\"comment\">//不行的，即不能该对象本身</span></span><br><span class=\"line\">\tobj.name=<span class=\"string\">&quot;张三&quot;</span>;<span class=\"comment\">//可以的，可以给该对象添加属性</span></span><br><span class=\"line\">    <span class=\"number\">4</span>、建议使用大写字母来命名</span><br><span class=\"line\"></span><br><span class=\"line\">作用：希望定义的值不被改变（锁定初始值）</span><br><span class=\"line\"><span class=\"keyword\">const</span> pi=<span class=\"number\">3.1415</span>;<span class=\"comment\">//比如希望π的值就是我设置的值</span></span><br><span class=\"line\">pi=<span class=\"number\">4</span>;<span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();<span class=\"comment\">//比如希望ajax对象不会被其他人或其他变量给改变。也需要常量</span></span><br><span class=\"line\"><span class=\"comment\">//其他人就无法改变你的变量的值了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr=<span class=\"number\">1</span>;<span class=\"comment\">//无法更改</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#解构赋值\">#</a> 解构赋值</h2>\n<p>概念：按照一定模式，将数组或对象中提取值（结构拆开）用于给变量赋值。<br>\n通俗讲就是将一个结构给解开，用于给变量或属性赋值。也就是<strong>解构在左边，赋值在右边</strong>。</p>\n<ol>\n<li>\n<p>数组的解构赋值<br>\n之前定义多个变量需要分别进行。而现在可以像数组那样批量声明和赋值变量。</p>\n<p>注意：左右两边必须要有中括号，才是解构赋值，如果左边有，右边没有则会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例子1：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; 等价于<span class=\"keyword\">let</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; 等价于<span class=\"keyword\">let</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>,d=<span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"comment\">//例子2：在左边可以给变量默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c=<span class=\"number\">5</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; 等价于<span class=\"keyword\">let</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">//注意：如果同时给了默认值和初始值，那么初始值会替换默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c=<span class=\"number\">5</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; 等价于<span class=\"keyword\">let</span> a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>  即c不会等于<span class=\"number\">5</span>，而是等于<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//例子3：可以使用逗号省略变量名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,,c] =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; 此时相当于<span class=\"keyword\">let</span> a=<span class=\"number\">1</span>,c=<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>对象的结构赋值<br>\n可以使用一个 let 声明批量定义多个对象。左边的变量名必须要在右边也出现相同的属性名。且没有顺序之分。<br>\n对象的结构赋值，右边的属性值可以是任意类型的数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意：匹配设置对象后，可以通过左边的变量名来访问右边对象的属性或方法，但是不允许在同级作用域中再次出现重复命名。即：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;foo,bar&#125;=&#123;<span class=\"attr\">foo</span>:<span class=\"string\">&quot;abc&quot;</span>,<span class=\"attr\">bar</span>:<span class=\"string\">&quot;123&quot;</span>&#125;; </span><br><span class=\"line\"><span class=\"keyword\">let</span> foo=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo) <span class=\"comment\">// 报错，不允许重复声明。因为foo已经被声明了。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>字符串<br>\n字符串之所以能够解构赋值，是因为字符串被转换成了一个类似数组的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d, e] = <span class=\"string\">&#x27;hello&#x27;</span>; <span class=\"comment\">//此时：a=h,b=e,...</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数参数</p>\n<p>假设参数是对象、数组、字符串以上 3 种时，可以用结构赋值的写法来写。<br>\na. 参数是数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>b. 参数是对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//d=5为默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">&#123;a,b,c,d=<span class=\"number\">5</span>&#125;</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">fun(&#123;</span><br><span class=\"line\">    a:<span class=\"number\">1</span>,</span><br><span class=\"line\">    b:<span class=\"number\">2</span>,</span><br><span class=\"line\">    c:<span class=\"number\">3</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h2>\n<p>模板字符串（template string）是增强版的字符串。用反引号（左上角的 1 旁边的符号），可以格式化 HTML 结构输出。</p>\n<p>使用 ${字符串变量或表达式} 占位符来表示具体的字符串，该模式放在反引号内即可，而不再需要用 + 号切割</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例子:</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name=<span class=\"string\">&quot;KOUOK&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello,<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello,<span class=\"subst\">$&#123;name+<span class=\"number\">1</span>&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello,<span class=\"subst\">$&#123;<span class=\"number\">2</span>+<span class=\"number\">2</span>&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象的简洁表示法\"><a class=\"markdownIt-Anchor\" href=\"#对象的简洁表示法\">#</a> 对象的简洁表示法</h2>\n<ol>\n<li>\n<p>属性和方法的简写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wo=<span class=\"string\">&quot;属性值&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//wo:wo,</span></span><br><span class=\"line\">    wo,</span><br><span class=\"line\">    <span class=\"comment\">//只能在对象中的方法简写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">skill</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Object.assign ()  合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1=&#123;</span><br><span class=\"line\">    name:<span class=\"string\">&quot;药水哥&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2=&#123;</span><br><span class=\"line\">    age:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj2=obj1;<span class=\"comment\">//不靠谱</span></span><br><span class=\"line\">obj2.sex=<span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//之前是如何实现的</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    obj2[prop]=obj[prop];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj2.sex=<span class=\"string\">&quot;男&quot;</span>;<span class=\"comment\">//不影响obj了</span></span><br><span class=\"line\">语法：</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target,ojb2,obj3);</span><br><span class=\"line\">作用：将多个对象合并到目标对象中，会改变目标对象。</span><br><span class=\"line\"><span class=\"comment\">//JQ的extend几乎一样</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newObj=$.extend(obj,obj2);<span class=\"comment\">//会改变obj对象</span></span><br><span class=\"line\"><span class=\"comment\">//使用场景：用户参数与系统默认参数进行合并</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"箭头函数重难点\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数重难点\">#</a> 箭头函数（重难点）</h2>\n<p>概念：使用箭头 =&gt; 定义的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//php:Array(&#x27;name&#x27;=&gt;&quot;药水哥&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上改箭头如何改</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun=<span class=\"function\">(<span class=\"params\">a</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以进一步简化为：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun=<span class=\"function\"><span class=\"params\">a</span>=&gt;</span>a;</span><br></pre></td></tr></table></figure>\n<p><strong>3 个特征：</strong></p>\n<p>1）、不需要 function 关键字来创建函数<br>\n var fun= function (x){<br>\nreturn x;<br>\n}<br>\n 可简写为：var fun= x=&gt; x;<br>\n 注意：如果只有一个参数，可以不写 (), 如果没有参数或多个参数就一定要写<br>\n比如 var fun=()=&gt; 5; 等价于 var fun=function (){ return 5;}<br>\n 2）、省略 return 关键字<br>\n函数语句和返回值只有一个表达式时是可以省略 {} 和 return 关键字的<br>\n 3）、继承当前上下文的 this 关键字，即在哪里定义 this 指的就是谁，而不是看它在哪里调用</p>\n<p><strong>注意事项：（面试题）</strong><br>\n1、不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误<br>\n 2、不可以使用 arguments 对象，该对象在函数体内不存在，如果要用，可以用 Rest 参数代替<br>\n 3、在箭头函数中，this 指向是固定的，也就是绑定在了定义时所在的作用域下。</p>\n<p>4、返回一个对象，且只有一条 return 语句时，需要加 ()；函数体包含多条语句时不可省略 {}，有多条语句并有返回值还需要手动写 return 返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第4个注意事项的例子：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        a:<span class=\"number\">1</span>,</span><br><span class=\"line\">        b:<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果函数只有一条return语句，则return关键字和&#123;&#125;都可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun=<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的默认值\"><a class=\"markdownIt-Anchor\" href=\"#函数的默认值\">#</a> 函数的默认值</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设用户传参了，则用用户的，否则用参数默认值，比如10</span></span><br><span class=\"line\"><span class=\"comment\">//最靠谱的给参数设置默认值的方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a=<span class=\"number\">10</span></span>)</span>&#123;</span><br><span class=\"line\">    alert(a);<span class=\"comment\">//undefined，10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun();<span class=\"comment\">//10</span></span><br><span class=\"line\">fun(<span class=\"number\">0</span>);<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"comment\">//之前的写法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//给参数设置一个默认值</span></span><br><span class=\"line\">    a=a||<span class=\"number\">10</span>;<span class=\"comment\">//短路运算,但是假设用户传递的是0，则会得不到用户的期待</span></span><br><span class=\"line\">    alert(a);<span class=\"comment\">//undefined，10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">0</span>);<span class=\"comment\">//用户没有调用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数的rest参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的rest参数\">#</a> 函数的 rest 参数</h2>\n<p>简单理解为 arguments 的升级强化版。</p>\n<p>如同 arguments 那样，但是是使用… 变量名表示，也就是将实参放入该参数数组中，该数组为一个真正的数组，可以使用数组的方法</p>\n<p>arguments 作用：函数的重载。根据传递不同的参数个数来实现不同的功能。</p>\n<p>它的缺点：是伪数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原来的arguments</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aruments.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aruments.length==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">       aruments[<span class=\"number\">0</span>]+aruments[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun();</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">///1、----使用rest参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">...arg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...rest参数</span></span><br><span class=\"line\">    <span class=\"comment\">//arg是真数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arg.length=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     <span class=\"comment\">//假设用户没有传参</span></span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"comment\">//假设用户传递的是2个参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arg.length==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">     arg[<span class=\"number\">0</span>]+arg[<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">fun();</span><br><span class=\"line\">fun(<span class=\"number\">1</span>);</span><br><span class=\"line\">fun(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//作用：代替arguments参数</span></span><br><span class=\"line\"><span class=\"comment\">//2、确定的使用形参，不确定的参数使用rest参数，即可选的参数使用rest参数来代替</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,...arg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+arg[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,...arg</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a+b+arg[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象和数组的扩展运算符\"><a class=\"markdownIt-Anchor\" href=\"#对象和数组的扩展运算符\">#</a> 对象和数组的扩展运算符</h2>\n<p>语法：… 对象或… 数组</p>\n<p>作用：深度复制对象或数组（合并对象或数组）</p>\n<ol>\n<li>\n<p>对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1=&#123;</span><br><span class=\"line\">    name:<span class=\"string\">&quot;药水哥&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2=&#123;</span><br><span class=\"line\">    sex:<span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//需求，将obj1，obj2合并为一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3=&#123;...obj1,...obj2&#125;</span><br><span class=\"line\">很明显是Ojbect.assign()的一个更简单的写法，语法糖形式。</span><br><span class=\"line\">语法糖：添加了某种语法，不影响程序功能，但更方便程序员使用。</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> brr=[<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> crr=[...arr,...brr];<span class=\"comment\">//[1,2,3,4,3,4];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"数组新增的那5个方法重点\"><a class=\"markdownIt-Anchor\" href=\"#数组新增的那5个方法重点\">#</a> 数组新增的那 5 个方法（重点）</h2>\n<p>共同点：写法都类似，只是功能不一样。</p>\n<ol>\n<li>\n<p>forEach<br>\n 相当于是 JQ 的 each 方法，遍历数组的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">34</span>,<span class=\"number\">45</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//传统的JS的写法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    sum+=arr[i]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//forEach,JS，隐式迭代</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//item是数组中的每一项</span></span><br><span class=\"line\">    <span class=\"comment\">//index是数组的索引</span></span><br><span class=\"line\">\tsum+=item;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//JQ:</span></span><br><span class=\"line\">$.each(arr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//item是数组中的每一项</span></span><br><span class=\"line\">    <span class=\"comment\">//index是数组的索引</span></span><br><span class=\"line\">\tsum+=item;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>map<br>\n 映射。地图。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需求，将数组的每一项数组元素*2并返回生成一个新的数组</span></span><br><span class=\"line\"><span class=\"comment\">//通过A数组按照某种模式或公式得到一个新的数组，他们之间存在映射关系，称之为影子数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">54</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> brr=[<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">108</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>];<span class=\"comment\">//新数组</span></span><br><span class=\"line\"><span class=\"comment\">//语法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> 影子数组=老数组.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//item指定的是数组的每一项数组元素</span></span><br><span class=\"line\">    <span class=\"comment\">//index指的是索引</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> 表达式|值</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//传统方式来写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">54</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> brr=[];</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span><br><span class=\"line\">    brr.push(item*<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//map方法来写</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> brr=arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//箭头来帮忙</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> brr=arr.map(<span class=\"function\"><span class=\"params\">item</span>=&gt;</span>item*<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>filter</p>\n</li>\n<li>\n<p>every</p>\n</li>\n<li>\n<p>find</p>\n</li>\n</ol>\n<p>兼容性：在 IE9 以上和现代浏览器中支持</p>\n",
            "tags": [
                "ES6"
            ]
        }
    ]
}