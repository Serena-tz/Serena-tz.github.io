{
    "version": "https://jsonfeed.org/version/1",
    "title": "阳光果苏 • All posts by \"axios\" tag",
    "description": "心情笔记 & 编程日记",
    "home_page_url": "https://Serena-tz.github.io",
    "items": [
        {
            "id": "https://serena-tz.github.io/2020/11/11/axios%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/",
            "url": "https://serena-tz.github.io/2020/11/11/axios%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/",
            "title": "axios的基本介绍",
            "date_published": "2020-11-11T01:44:04.000Z",
            "content_html": "<h2 id=\"axios-vue的ajax版\"><a class=\"markdownIt-Anchor\" href=\"#axios-vue的ajax版\">#</a> axios -vue 的 ajax 版</h2>\n<p>假设用 vue 来获取数据，不是使用原生的 JS 方式获取，也不需要使用 jquery 的方式。而是用 axios。</p>\n<p>axios 目前是 vue 的官方推荐的 ajax 方式。</p>\n<p>axios 是第三方的基于 ES6 的 promise 封装的 ajax 方式。</p>\n<p>特色：支持浏览器、Nodejs 环境</p>\n<p>语法类似于 jquery 的 ajax 方法。支持链式操作。所以几乎没有使用和学习成本。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z\">https://github.com/axios/axios</span></p>\n<p>不是 vue 自带，如果要使用，需要额外下载。</p>\n<p>1. 安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在当前项目中，执行以下指令</span></span><br><span class=\"line\">cnpm i axios -D</span><br></pre></td></tr></table></figure>\n<p>2. 使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//核心代码</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$axios(&#123;</span><br><span class=\"line\">    method:<span class=\"string\">&quot;get|post&quot;</span>,</span><br><span class=\"line\">    url:<span class=\"string\">&quot;xxx/xxx.json&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取数据成功后会执行的方法，数据在res中</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取数据失败后会执行的函数</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>a. 只在某个组件中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">//在组件中，比如home.vue中导入</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>b. 全局在项目任意文件都可以使用</p>\n<ol start=\"3\">\n<li>\n<p>何时获取数据</p>\n<p>a. 点击了后执行，则将 axios 代码放在 methods 中</p>\n<p>b. 想要加载组件就获取数据，就需要将 axios 放在 vue 的声明周期的钩子函数中，比如 created</p>\n</li>\n</ol>\n<h2 id=\"vue的生命周期函数\"><a class=\"markdownIt-Anchor\" href=\"#vue的生命周期函数\">#</a> Vue 的生命周期函数</h2>\n<p>生命周期：变量从出生到销毁这段时间</p>\n<p>局部：函数执行完就销毁</p>\n<p>全局：页面关闭就销毁</p>\n<p>vue：从 new 实例开始到 Ctrl+C 终止项目</p>\n<ol>\n<li>\n<p><strong>什么是生命周期</strong><br>\n通俗讲，指的是 Vue 中实例或者组件从创建到消灭中间经过的一系列过程。就类似于一个人从出生到死亡。或一个变量从创建到销毁。<br>\n这一过程中会发生很多什么时候做什么的事情，比如实例创建，元素绑定，视图渲染，vue 函数被执行等等。<br>\n在该生命周期不同阶段会触发不同的函数，就称之为生命周期钩子函数</p>\n</li>\n<li>\n<p><strong>钩子函数、回调函数与普通函数的区别（面试题）</strong></p>\n<p>​\tvue 中的钩子函数、作用见图片。</p>\n<p>​    比如 created 是钩子函数，当 vue 模板还没渲染成 HTML 前就会被调用，钩子函数与回调函数的区别在于，钩子函数只要满足了某个状态，比如消息捕获了，页面载入进来了就会触发，而回调函数则是完成了上面一个动作再执行，比如动画完成后再执行回调，普通函数则一般是通过调用执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们学过的钩子函数</span></span><br><span class=\"line\">onreadychange=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(readyState==<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"><span class=\"comment\">//我们学过的回调函数：</span></span><br><span class=\"line\">太多了</span><br><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">   </span><br><span class=\"line\">$.animate(<span class=\"string\">&quot;样式&quot;</span>,<span class=\"string\">&quot;时间&quot;</span>,<span class=\"string\">&quot;运动方式&quot;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"axios全局使用\"><a class=\"markdownIt-Anchor\" href=\"#axios全局使用\">#</a> axios 全局使用</h2>\n<ol>\n<li>\n<p>在 main.js 中操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入axios，需要启用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 需要挂载到vue的实例中，变成Vue的全局方法</span></span><br><span class=\"line\">Vuee.prototype.$axios=axios;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在组件任意地方使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$axios.get().then().catch()</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$axios(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;).then().catch()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"props的验证\"><a class=\"markdownIt-Anchor\" href=\"#props的验证\">#</a> props 的验证</h2>\n<p>​\t如果不验证，那么使用父组件传进来的数据是这样使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:[<span class=\"string\">&#x27;自定义属性&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>​\t目的：将从父组件传进来的数据类型进行验证，如果不符合要求，则会报错。</p>\n<p>​    1、基本用法：<br>\n​    语法：<br>\n​    props:{<br>\n​        自定义属性：数据的原始类型<br>\n​    }<br>\n​    比如：<br>\n​    props:{<br>\n​        seller：Object<br>\n​    }<br>\n​    如果要验证多种数据类型需要使用数组将多个类型放在一块<br>\n​    比如：<br>\n​    props:{<br>\n​        seller：[Object,Number]<br>\n​    }</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常见的数据类型为：</span></span><br><span class=\"line\">    <span class=\"built_in\">String</span></span><br><span class=\"line\">    <span class=\"built_in\">Number</span></span><br><span class=\"line\">    <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">    <span class=\"built_in\">Function</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span></span><br><span class=\"line\">    <span class=\"built_in\">Array</span></span><br><span class=\"line\">    <span class=\"built_in\">Symbol</span>  该类型为ES6引入的新类型，表示是独一无二的值，<span class=\"built_in\">Symbol</span> 值通过<span class=\"built_in\">Symbol</span>函数生成</span><br></pre></td></tr></table></figure>\n<p>2、设置默认值<br>\n比如：<br>\nprops: {<br>\nselectedFoods: {<br>\ntype: Array, // 当类型是 Array 或 Object 时，default 就是一个函数<br>\n default () {<br>\nreturn [];<br>\n}<br>\n},<br>\ndeliveryPrice: {<br>\ntype: Number,<br>\ndefault: 0<br>\n}<br>\n}</p>\n<p>3、设置必填项<br>\n比如：<br>\n// 必填且传进来的必须是字符串<br>\n seller: {<br>\ntype: String,<br>\nrequired: true<br>\n}</p>\n<h2 id=\"vue中的ref属性和thisrefs\"><a class=\"markdownIt-Anchor\" href=\"#vue中的ref属性和thisrefs\">#</a> vue 中的 ref 属性和 this.$refs</h2>\n<p>1、在 Vue 的模板中，我们可以在模板中的任何元素中添加 ref 属性，这样就可以在 Vue 实例中引用这些元素。更具体地说，可以访问 DOM 元素。</p>\n<p>2、在 Vue 实例上使用 this.$refs 属性可以通过 ref=' 属性值’来引用这个按钮，得到的是一个匹配到该属性值的 DOM 数组。</p>\n<p>3、在 vue 的自定义标签代表的组件上添加 ref=“属性值”，得到的是该组件实例，意味着可以访问该实例的所有属性和方法</p>\n<p>注意：如果只是写 this.$refs 那么得到的是在 this 内所有的有 ref 属性的 DOM 节点对象和组件实例对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//例子1：</span><br><span class=\"line\">HTML模板中：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 添加ref属性，这样就可以在vue的实例中访问该元素，从而可操作该元素 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&#x27;item,index in seller.supports&#x27;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;list&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&#x27;hello(index)&#x27;</span>&gt;</span>&#123;&#123;item.description&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//vue实例的methods方法中：</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  hello(i)&#123;</span><br><span class=\"line\">      /*通过在元素上绑定事件，可以通过this.$refs访问DOM,他是一个对象，是所有在DOM上使用了ref属性的数组元素的集合，可以通过数组下标得到具体的那个DOM，如果是循环，传入index即可*/</span><br><span class=\"line\">      console.log(this.$refs.list[i]);</span><br><span class=\"line\">      this.$refs.list[i].innerText=&#x27;我被点击了&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//例子2：</span><br><span class=\"line\">// 导入详情页模板</span><br><span class=\"line\">import vdetails from &#x27;@/components/details&#x27;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在template中使用了该目标 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">vdetails</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;showFlag&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vdetails</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--可以在当前组件通过  --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">this.$refs.showFlag访问vdetails组件实例（所有方法和属性）</span><br><span class=\"line\">也就是如果在自定义组件标签中添加的ref，那么得到的就是该组件实例，也就可以通过该组件实例访问组件实例的所有方法和属性</span><br></pre></td></tr></table></figure>\n<h2 id=\"调试js代码的几种方式\"><a class=\"markdownIt-Anchor\" href=\"#调试js代码的几种方式\">#</a> 调试 JS 代码的几种方式</h2>\n<ol>\n<li>使用 console.log (变量)</li>\n<li>在 source 面板中设置断点</li>\n<li>在代码中使用写 debugger</li>\n<li>假设用的是 vue，则有个 Vue 的工具可以查看或者开启 Vue 的开发者模式</li>\n</ol>\n",
            "tags": [
                "axios"
            ]
        }
    ]
}