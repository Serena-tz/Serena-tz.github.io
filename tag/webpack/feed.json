{
    "version": "https://jsonfeed.org/version/1",
    "title": "阳光果苏 • All posts by \"webpack\" tag",
    "description": "心情笔记 & 编程日记",
    "home_page_url": "https://Serena-tz.github.io",
    "items": [
        {
            "id": "https://serena-tz.github.io/2020/11/04/webpack%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/",
            "url": "https://serena-tz.github.io/2020/11/04/webpack%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/",
            "title": "webpack的基本介绍",
            "date_published": "2020-11-04T01:14:35.000Z",
            "content_html": "<h2 id=\"前端构建化工具-webpack\"><a class=\"markdownIt-Anchor\" href=\"#前端构建化工具-webpack\">#</a> 前端构建化工具 - webpack</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS8=\">https://www.webpackjs.com/</span> 。前端越来越有工程化、模块化趋势。对前端的要求越来越多。</p>\n<p><strong>webpack 产生的必要性</strong></p>\n<ol>\n<li>开发环境的需求是代码越详细越好、注释越具体越好，模块化开发、按照需求可以开发复杂的代码</li>\n<li>到了生产环境（线上，准备要发布），需求又是相反的。</li>\n<li>所以将开发环境的那些代码通过一款自动化工具来完成打包、编译、压缩等工作就称之为构建</li>\n</ol>\n<h2 id=\"使用webpack\"><a class=\"markdownIt-Anchor\" href=\"#使用webpack\">#</a> 使用 webpack</h2>\n<ol>\n<li>安装 webpack</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在任意文件夹下打开命令行中输入以下两个指令</span></span><br><span class=\"line\">cnpm i webpack -g</span><br><span class=\"line\"><span class=\"comment\">//回车后再次输入以下指令安装：</span></span><br><span class=\"line\">cnpm i webpack-cli -g</span><br><span class=\"line\"><span class=\"comment\">//测试是否安装成功</span></span><br><span class=\"line\">webpack -v </span><br><span class=\"line\"><span class=\"comment\">//可以一次性安装多个</span></span><br><span class=\"line\">cnpm i webpack webpack-cli -g</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>写一个配置文件</li>\n</ol>\n<p>告诉他怎么做，要打包哪些文件，打包到哪里等信息，该配置文件一般命名为：webpack.config.js<br>\nwebpack 会自动根据该配置文件打包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入了一个Nodejs的路径模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 导出</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> <span class=\"comment\">//entry :入口文件。即要打包的文件，自动分析里面的依赖，并且自动构</span></span><br><span class=\"line\">  entry:<span class=\"string\">&#x27;./main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//出口：将打包好的放哪里</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放路径，使用path模块下的resolve方法解决打包路径问题，__dirname 特殊的变量当前目录，‘dist’是目标目录</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;my-first-webpack.bundle.js&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包的具体步骤和内容\"><a class=\"markdownIt-Anchor\" href=\"#打包的具体步骤和内容\">#</a> 打包的具体步骤和内容</h2>\n<h3 id=\"打包js\"><a class=\"markdownIt-Anchor\" href=\"#打包js\">#</a> 打包 JS</h3>\n<ol>\n<li>如果要打包 JS，需要将之前的 js 改为 Nodejs 的模块才可以正常打包。</li>\n</ol>\n<p>原因：webpack 是基于 Nodejs 环境的，所以 JS 的模块化就不能像刚刚那样写了，要改成 Nodejs 模块的写法</p>\n<ol start=\"2\">\n<li>如何改造：参考如何将 IIFE 改造为</li>\n</ol>\n<p><strong>两个步骤：</strong></p>\n<p>​\ta. 注释 IIFE（第一行、最后一行）</p>\n<p>​\tb. 将 return 改为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Nodejs的写法</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//要导的变量或方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//也可以将其改为ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//导出去的变量或方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>\n<p>在其他文件使用以上模块，比如导入到 main.js (主 JS 文件) 中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//NODEJS的导入模块的写法,</span></span><br><span class=\"line\"><span class=\"comment\">//如果后缀名是.js则后缀名可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moduleA=<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//ES6导入模块的写法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moduleB <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./b.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 因为在mainjs中导入了a.js，所以可以在main.js中使用它的方法和属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(moduleA.a);</span><br><span class=\"line\"><span class=\"comment\">// 调用来自b.js的方法</span></span><br><span class=\"line\">moduleB.fun();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>打包后可以在 index.html 中使用打包好的 JS 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;dist/my-first-webpack.bundle.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"打包css\"><a class=\"markdownIt-Anchor\" href=\"#打包css\">#</a> 打包 CSS</h3>\n<p>webpack 默认只能打包 JS，如果要打包其他的，需要下载额外的插件：loader 插件。</p>\n<p>需要添加 style-loader 和 css-loader</p>\n<p>步骤：</p>\n<ol>\n<li>\n<p>导入 css-loader,style-loader（webpack 并没有集成则两款 loader，需要额外下载才可以使用）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在当前目录下执行以下指令：</span><br><span class=\"line\">cnpm i style-loader css-loader </span><br><span class=\"line\">回车</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>改写配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入了一个Nodejs的路径模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 导出模块</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> <span class=\"comment\">//entry :入口文件。即要打包的文件，自动分析里面的依赖，并且自动构建</span></span><br><span class=\"line\">  <span class=\"comment\">// entry: &#x27;./a.js&#x27;,</span></span><br><span class=\"line\">  entry:<span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//出口：将打包好的放哪里</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放路径，使用path模块下的resolve方法解决打包路径问题，__dirname 特殊的变量当前目录，‘dist’是目标目录</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;my-first-webpack.bundle.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 在默认配置的基础上添加了如下配置代码</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 添加打包css的配置</span></span><br><span class=\"line\">      rules:[&#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>导入 css 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在main.js这个主页文件中导入了css</span><br><span class=\"line\"><span class=\"comment\">// 将CSS也当做模块来导入和处理</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./css/style.css&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>优化：将所有的该项目的依赖包文件写入到 package.json 中，下次即使删除了 node_modules 文件夹，也可以通过一个指令快速将所有的依赖包下载下来。</p>\n<p>即将该项目的依赖包注入到该配置文件中</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果这是你的项目，在第一次下载安装项目依赖包时，顺便写入到package.json中，方便下次一键下载</span></span><br><span class=\"line\">cnpm i 包名 -D;<span class=\"comment\">//--save-dev</span></span><br><span class=\"line\"><span class=\"comment\">//比如：</span></span><br><span class=\"line\">cnpm i style-loader -D</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\">cnpm i style-loader --save-dev</span><br></pre></td></tr></table></figure>\n<p>如果用的是别人的项目，先看看别人的 package.json 中有没有依赖包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;style-loader&quot;</span>: <span class=\"string\">&quot;^2.0.0&quot;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>如果有，则执行下面的指令一键安装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i<span class=\"comment\">//下载所有的依赖包，就不需要一个个下载了</span></span><br></pre></td></tr></table></figure>\n<p>如果是自己的项目，假设你第一次时已经将依赖包注入到了 package.json 也可以使用 cnpm i 一键下载所有的依赖包。</p>\n<h3 id=\"小提示\"><a class=\"markdownIt-Anchor\" href=\"#小提示\">#</a> 小提示</h3>\n<ol>\n<li>\n<p>如何升级 nodes 的模块，比如升级 webpack</p>\n<p>升级跟安装是一样的指令</p>\n</li>\n<li>\n<p>项目源代码做了任何改动都需要重新执行一次 webpack 打包指令。</p>\n</li>\n</ol>\n<h2 id=\"webpack打包图片-图标字体\"><a class=\"markdownIt-Anchor\" href=\"#webpack打包图片-图标字体\">#</a> webpack 打包图片、图标字体</h2>\n<p>文件：图片、图标字体</p>\n<p>需要使用一个 file-loader 的加载器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">      rules:[&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 添加打包css的配置</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 打包了图片、图标字体---新增的</span></span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|eot|woff|ttf|svg)$/</span>,</span><br><span class=\"line\">        use: <span class=\"string\">&#x27;file-loader&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]&#125;</span><br></pre></td></tr></table></figure>\n<p>在项目根目录下使用命令行工具执行以下指令：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i <span class=\"comment\">//安装所有的依赖包</span></span><br><span class=\"line\"><span class=\"comment\">//刚刚添加了一个file-loader，需要单独下载并注入到package.json中</span></span><br><span class=\"line\">cnpm i file-loader -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"打包html-并实现热更新终极版\"><a class=\"markdownIt-Anchor\" href=\"#打包html-并实现热更新终极版\">#</a> 打包 HTML、并实现热更新（终极版）</h2>\n<p>需要把 HTML 也当做模块来处理并添加服务器包。</p>\n<p>loader 没办法处理 HTML 这种文件，需要使用插件：</p>\n<ol>\n<li>\n<p>在 webpack.config.js 中新增如下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//通过 npm 安装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//访问内置的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">//改动了任意代码都需要webpack实时更新打包构建，所以需要再次在局部安装一次</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>以上仅仅只是可以处理 HTML，如果要实现热启动（热更新）需要再配置一个服务器对象（包）webpack-dev-server<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS9ndWlkZXMvZGV2ZWxvcG1lbnQvIyVFNCVCRCVCRiVFNyU5NCVBOC13ZWJwYWNrLWRldi1zZXJ2ZXI=\">https://www.webpackjs.com/guides/development/# 使用 - webpack-dev-server</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i --save-dev webpack-dev-server<span class=\"comment\">//局部安装一次</span></span><br><span class=\"line\">cnpm i webpack-dev-server -g<span class=\"comment\">//全局安装一次</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>还需要局部安装一次 webpack-cli 脚手架包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i  webpack-cli  -D</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>安装以上 5 个包后，就可以启动该应用了，原来使用 webpack 来启动，现在需要使用服务器的方式来启动，也就是启动指令改为了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server --open <span class=\"comment\">//在浏览器新窗口自动打开该应用</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>我们使用的是 webpack5 版本，但是 webpack-dev-server 还没有做好更新，即两者不兼容，需要将 webpack-cli 的版本降低，以便兼容才可以</p>\n<p>做法：在 package.json 中将</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;webpack-cli&quot;</span>: <span class=\"string\">&quot;^4.2.0&quot;</span>,</span><br><span class=\"line\">改为：</span><br><span class=\"line\"><span class=\"string\">&quot;webpack-cli&quot;</span>: <span class=\"string\">&quot;^3.3.12&quot;</span>,</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后删除项目的 node_modules 文件夹，重新使用 cnpm i 安装一次</p>\n</li>\n<li>\n<p>将启动指令改为容易记忆的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到package.json的script部分，添加如下代码：</span><br><span class=\"line\"><span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;webpack-dev-server --open&quot;</span>,</span><br><span class=\"line\"><span class=\"comment\">//下次启动应用时可以用</span></span><br><span class=\"line\">npm start </span><br><span class=\"line\">来代替webpack-dev-server --open</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"less-css的预处理器之一\"><a class=\"markdownIt-Anchor\" href=\"#less-css的预处理器之一\">#</a> less-css 的预处理器之一</h2>\n<h3 id=\"为什么要学习css的预编译处理器\"><a class=\"markdownIt-Anchor\" href=\"#为什么要学习css的预编译处理器\">#</a> 为什么要学习 css 的预编译处理器</h3>\n<p>CSS 最明显的短板就是它只是一个标记语言，没有变量、语句等编程语言的特点。如果项目过长，写起来有些麻烦，而且会产生较多的重复代码。</p>\n<p>虽然只要团队中的成员都有模块化的思想，并有统一的规范，可以完全不在团队中使用与处理器，但是为了能让写 css 变得像写 JS 那样灵活，支持变量、语句、混合（mixin）、函数等等，就产生了预处理器。</p>\n<p>比如 bootstrap 的 css 就是有 css 预编译写好再转成普通 css 文件的。后面我们学习 vue.js 或者看别人写的项目，到公司上班都很有可能遇到 css 预编译处理器。所以我们得学会如何使用。</p>\n<h3 id=\"常见的预编译处理器\"><a class=\"markdownIt-Anchor\" href=\"#常见的预编译处理器\">#</a> 常见的预编译处理器</h3>\n<p>​    1、sass(Syntactically Awesome StyleSheets)<br>\n​        官网：<span class=\"exturl\" data-url=\"aHR0cDovL3Nhc3MtbGFuZy5jb20v\">http://sass-lang.com/</span><br>\n​        中文：<span class=\"exturl\" data-url=\"aHR0cDovL3Nhc3MuYm9vdGNzcy5jb20v\">http://sass.bootcss.com/</span><br>\n​        学习教程：<br>\n​        <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTIvMDYvc2Fzcy5odG1s\">http://www.ruanyifeng.com/blog/2012/06/sass.html</span><br>\n​        线上测试工具：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Fzc21laXN0ZXIuY29tLw==\">https://www.sassmeister.com/</span></p>\n<p>​\t2、less<br>\n​    less 受 sass 影响较大，也就是写法借鉴了 sass，两者语法类似<br>\n​    官网：<span class=\"exturl\" data-url=\"aHR0cDovL2xlc3Njc3Mub3JnLw==\">http://lesscss.org/</span><br>\n​    中文：<span class=\"exturl\" data-url=\"aHR0cDovL2xlc3Njc3MuY24v\">http://lesscss.cn/</span><br>\n​    学习教程：<br>\n​    <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ib290Y3NzLmNvbS9wL2xlc3Njc3Mv\">http://www.bootcss.com/p/lesscss/</span><br>\n​    <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydW5vb2IuY29tL21hbnVhbC9sZXNzZ3VpZGUv\">http://www.runoob.com/manual/lessguide/</span><br>\n​    <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTGVzc18oJUU1JUIxJTgyJUU1JThGJUEwJUU2JUEwJUI3JUU1JUJDJThGJUU4JUExJUE4KQ==\">https://zh.wikipedia.org/wiki/Less_(层叠样式表)</span></p>\n<p>​\t3、stylus<br>\n​    因为 node.js 的兴起才诞生的，但流行程度远不及以上两者。</p>\n<pre><code>两者语言语法差不多，基本上一通全通。相比较而言，less稍微简单一点点，更适合前端开发，而sass更适合偏后端使用。\n</code></pre>\n<h3 id=\"less语法\"><a class=\"markdownIt-Anchor\" href=\"#less语法\">#</a> less 语法</h3>\n<ol>\n<li>\n<p>变量</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS:</span><br><span class=\"line\">var a=1;</span><br><span class=\"line\">less:</span><br><span class=\"line\">@red:red;<span class=\"comment\">//值是红色</span></span><br><span class=\"line\"><span class=\"variable\">@br:</span><span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\"><span class=\"variable\">@m10:</span><span class=\"number\">10px</span>;</span><br><span class=\"line\">使用：</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"variable\">@red</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"variable\">@br</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"variable\">@m10</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>:<span class=\"variable\">@m10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码最终会编译成如下正常格式：</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>混合</p>\n</li>\n<li>\n<p>嵌套</p>\n</li>\n</ol>\n<h3 id=\"如何使用语法通用\"><a class=\"markdownIt-Anchor\" href=\"#如何使用语法通用\">#</a> 如何使用（语法通用）</h3>\n<ol>\n<li>\n<p>在浏览器环境下使用</p>\n<p>两种使用条件：</p>\n<p>a. 需要在服务器环境下进行（要借助 JS 完成）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在要使用less的HTML文件中写如下代码：</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导入less文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet/less&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;style.less&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导入解析less的JS文件</span></span><br><span class=\"line\"><span class=\"comment\">下载地址：https://raw.githubusercontent.com/less/less.js/v2.5.3/dist/less.min.js</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;less.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">//2. 在服务器环境下打开该项目或文件</span><br></pre></td></tr></table></figure>\n<p>b. 先编译再使用（非常原始的用法，很不方便）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在任意文件夹下，通过npm下载less包</span><br><span class=\"line\">cnpm i less -g</span><br><span class=\"line\"><span class=\"comment\">//看看是否安装成功</span></span><br><span class=\"line\">lessc -v <span class=\"comment\">//3.12.2</span></span><br><span class=\"line\"><span class=\"comment\">//编译  输入less文件，输出css文件</span></span><br><span class=\"line\">lessc less文件  css文件</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 Nodejs 或 webpack 环境下使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、将less放到src中当做模块来打包，在main.js中导入</span><br><span class=\"line\"><span class=\"comment\">// 导入less文件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./less/style.less&#x27;</span>);</span><br><span class=\"line\"><span class=\"number\">2</span>、在webpack.config.js中导入less-loader来处理</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加打包css|less的配置</span></span><br><span class=\"line\">\ttest: <span class=\"regexp\">/\\.(css|less)$/</span>,</span><br><span class=\"line\">\tuse: [<span class=\"string\">&#x27;style-loader&#x27;</span>,<span class=\"string\">&#x27;css-loader&#x27;</span>,<span class=\"string\">&#x27;less-loader&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、在当前项目目录下下载less-loader和less包</span><br><span class=\"line\">cnpm i less-loader less -D</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、npm start 启动该项目（先确保安装了该项目的所有的依赖包）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、OK，完成！在项目中直接写less代码会自动编译和刷新页面</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n",
            "tags": [
                "webpack"
            ]
        }
    ]
}